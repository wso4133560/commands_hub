# 查看进程
 docker ps

# 查看所有进程
 docker ps -a

# 删除进程
 docker rm [进程]

# 临时进入容器
 docker attach [容器]

# 启动容器
 docker start [进程]

# 进入容器
 docker exec -it [容器] /bin/sh

# 停止容器
 docker stop [容器]

# 后台启动
 docker run -d -it [镜像] /bin/bash

# 临时启动
 docker run --rm -it [镜像] bash
 
# 后台端口映射
 docker run -p [宿主机端口]:[端口] -d -it [镜像] /bin/bash

# 启动docker service
 systemctl enable docker && systemctl start docker

# 下载镜像
docker pull [url]
 
# 删除镜像
docker rm [镜像]
 
# 查看镜像
docker image ls

# 重启容器
docker restart [容器ID]

# 打包文件系统
tar -cvpf /tmp/system.tar --directory=/ --exclude=proc --exclude=sys --exclude=dev --exclude=run --exclude=bookmarkearth

# 将tar包生成镜像
docker import [tar包] [镜像名字]

# 使用 docker export 命令根据容器 ID 将镜像导出成一个文件
docker export [容器ID] > hangger_server.tar

# 使用docker-compose
 docker-compose -f [yaml] up
 SEND,docker-compose -f [yaml] down

# docker 网络模式
 docker run --net=none --rm -it [镜像] bash
 docker run --net=host --rm -it [镜像] bash
 docker run --net=bridge --rm -it [镜像] bash
 docker run --net=container:[进程] --rm -it [镜像] bash

# docker 登录
docker login --username=[账号] [url]

# docker映射文件夹
docker run -d -it -v [宿主机绝对路径]:[docker内部文件夹例如/mnt] [镜像ID] /bin/bash

# docker以root权限运行容器
sudo docker exec -ti -u root [容器ID] bash

# docker的run命令，官方文档
https://docs.docker.com/engine/reference/run/

# docker 进入ssh的方法
1.启动容器
sudo docker run -it --privileged	 --net=host --security-opt seccomp=unconfined 39f5d02545a9 /bin/bash 
2.安装ssh
apt update
apt install openssh-server openssh-client vim
vim /etc/ssh/sshd_config
PermitRootLogin yes
3.修改root密码
passwd
4.启动sshd
/usr/sbin/sshd -p 50002

# 添加特权命令
--privileged	

# 当在Docker容器中看到 "init system (PID 1). Can't operate" 错误时，通常是因为容器内部没有正在运行的 init 进程，而 init 进程是 Linux 系统中的第一个进程，负责启动和管理其他进程。
--init

# docker查看进程详细信息的命令
docker inspect [进程ID]

# docker使用宿主机的命令参数
--gpus all
sudo apt install nvidia-container-runtime
sudo systemctl restart docker
sudo docker run --name ubuntu20.04 --gpus all --privileged --net=host -d -it 83a4bf3bb050

# 容器如果意外被关闭都能够自动重启的参数
--restart=always

# 可以跑systemd的docker
https://github.com/robertdebock/docker-ubuntu-systemd
https://github.com/AkihiroSuda/containerized-systemd

# 查看docker退出的日志
docker logs container_id

# 编译Dockerfile命令
sudo docker build -t [镜像名] .

# 从容器外拷贝文件到容器内，不需要容器启动
docker cp [本地文件路径]  [容器ID]:[容器路径]

# docker 安装buildx插件
1. 打开实验室功能
vim /etc/docker/daemon.json
{
  "experimental": true
}
2. systemctl restart docker
3. 在这个页面下载可执行文件
4. /usr/libexec/docker/cli-plugins 将可执行文件名改为docker-buildx

# docker给镜像修改名字
docker tag [image id] [name]:[tag]

# 启动带systemctl的docker
sudo docker run --privileged \
-v /run/systemd/system:/run/systemd/system \
-v /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket \
-it ubuntu:20.04 systemctl

# Docker out of Docker
另一种方法是将主机的Docker套接字（通常是/var/run/docker.sock）挂载到容器中。
这样，容器内的Docker客户端可以直接与主机的Docker守护进程通信，而不需要在容器内启动一个新的Docker守护进程。
这种方法被称为“Docker out of Docker”（DooD）

# 无感知Dockerfile
FROM ubuntu:22.04
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get install -y \
    git \
    python3 \
    python3-venv \
    python3-dev \
    python3-pip \
    cmake \
    ninja-build \
    clang \
    ccache \
    lld \
    git-lfs && \
    rm -rf /var/lib/apt/lists/*
  
ARG USER_ID
ARG USERNAME
  
RUN useradd -u $USER_ID -m -d /home/${USERNAME} -s /bin/bash ${USERNAME}-docker && \
    echo "${USERNAME}-docker ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
USER ${USERNAME}-docker
WORKDIR /home/${USERNAME}
  
CMD ["/bin/bash"]

# build-image sh
IAMGE_NAME=$(whoami)-image
set -x
docker build \
 --build-arg USER_ID=$(id -u) \
 --build-arg USERNAME=$(whoami) \
 -t $(IMAGE_NAME) \
 .

# 删除未使用的镜像
docker image prune -a

# 清理所有未使用的资源
docker system prune -a
