# 查看默认优化参数
 gcc -Q -O0 --help=optimizers 

# 关闭默认优化
-O0-fno-OPTIMIZATION_NAME
例如：
-finline
-O0-fno-inline

# 查看默认参数
gcc -v

# 定位过度优化的参数链接
https://gcc.gnu.org/onlinedocs/gcc/Developer-Options.html
例如gcc -O3 -fopt-info-inline-optimized-missed=inline.txt，这个可以讲内联的函数输出到inline.txt中

# 保存临时文件
-save-temps
# 例子gcc -save-temps a/foo.c

# 在main函数执行
__attribute__((constructor)) static void xxxx()

# 打印上个函数的地址
__builtin_return_address

# 查看gcc预定义宏
gcc -dM -E - < /dev/null

# 编译器生成一个裸函数(需要声明后使用)
__attribute__((naked))
void  myNakedFunction() __attribute__((naked));

# gcc更换版本命令的操作
sudo apt install gcc-10 g++-10
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10
sudo update-alternatives --config gcc
sudo update-alternatives --config g++ 

# gcc编译下载先决条件
contrib/download_prerequisites

# gcc dump出所有中间信息
-fdump-tree-all

# 画出CFG图
gcc -fdump-tree-all-graph -c your_source_code.c
dot -Tpng your_source_code.c.003t.gimplegraph.dot -o output_file.png

# ubuntu的gcc
https://code.launchpad.net/ubuntu/+source/gcc-13
git clone https://git.launchpad.net/ubuntu/+source/gcc-13
https://launchpad.net/ubuntu/+source/gcc-13/13.2.0-9ubuntu1


# 编译环境
sudo apt-get install libgmp-dev libmpfr-dev libmpc-dev

GCC的测试套件是一套组合了许多测试案例的工具，用来验证GCC编译器在各种情况下的功能和性能。GCC测试套件依赖于DejaGnu测试框架，DejaGnu则是基于TCL脚本语言。

要使用GCC的测试套件，你需要遵循以下步骤：

安装DejaGnu:
GCC测试套件依赖于DejaGnu测试框架，所以你需要先安装DejaGnu。通常可以通过系统的包管理器来安装，例如在基于Debian的系统上你可以使用以下命令：

sudo apt-get install dejagnu
安装TCL:
如果你的系统中还未安装TCL，你也需要安装TCL解释器。DejaGnu是基于TCL的，所以它是必须的。在基于Debian的系统上安装TCL的命令是：

sudo apt-get install tcl
获取GCC源码:
GCC的测试套件包含在GCC源码包中。你可以从GCC的官方网站下载最新的源码或者通过版本控制系统（如Git）得到。

git clone git://gcc.gnu.org/git/gcc.git
编译GCC:
在运行测试前，你需要配置和编译GCC。在源码目录中运行以下命令来配置GCC：

./configure --enable-languages=c,c++
make
这会编译支持C和C++的GCC。你可以根据需要启用其他语言。

运行测试:
编译完成后，在GCC的源码目录中使用make来运行测试套件：

make -k check







# ubuntu添加安装gcc的命令
sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa -y

# 启用stage4的命令
make stage4-bubble

# -fdump-tree-original-raw 可以打印 node 形式，这种形式更适合看语法树的形式，节点与 tree.def 中的定义相对应

# 解决最终输出是xgcc xg++的问题
export CC_FOR_TARGET=aarch64-linux-gnueabi-gcc
export CXX_FOR_TARGET=aarch64-linux-gnueabi-g++

# search head command
g++ -v -E -x c++ /dev/null
