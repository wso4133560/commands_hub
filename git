# 下载完所有子模块
git submodule update --init --recursive

# 查看所有分支的命令
git branch -a

# 删除某个分支
git branch -d [分支名]

# 切换远程分支
git checkout -b 本地分支名 origin/远程分支名

# 删除文件
git rm -f [文件名]

# 克隆特定分支
git clone [链接] -b [分支]


# 修改名词
git mv --force AppTest.java apptest.java
git add apptest.java
git commit –m "rename"
git push origin XXX(分支)

# 下载被删除掉的文件
git checkout [文件路径]

# 使用令牌环push
git push https://[Personal Access Token]@github.com/[User Name]/[Repository Name].git


# git如何新建分支
1) 切换到基础分支，如主干
git checkout master
2）创建并切换到新分支
git checkout -b panda
git branch可以看到已经在panda分支上
3)更新分支代码并提交
git add *
git commit -m "init panda"
git push origin panda


# git查看代理
git config --global --get http.proxy
git config --global --get https.proxy

# 设置代理：
git config --global http.proxy 'socks5://127.0.0.1:1080' 
git config --global https.proxy 'socks5://127.0.0.1:1080'

# git恢复成某个版本
git reset --hard [hash值]
# 版本恢复后强行推上去命令
git push -f

# 取消代理：
git config --global --unset http.proxy
git config --global --unset https.proxy

# 给sh文件添加可执行权限
find -name "*.sh" -exec chmod +x {} \;
find -name "*.sh" -exec git update-index --chmod=+x {} \;

# git查看链接
git remote -v


# 删除子模块
rm -rf 子模块目录 删除子模块目录及源码
vi .gitmodules 删除项目目录下.gitmodules文件中子模块相关条目
vi .git/config 删除配置项中子模块相关条目
rm .git/module/* 删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可
git rm -cache [模块名字]

# 修改提交的信息 追加提交内容
git commit --amend

# git环境变量信息
git config --global -l

# 撤销commit
git reset --soft HEAD^

# 恢复某个文件到某个提交
git checkout [分支ID] -- ［文件路径］

# 删除某个分支
git push origin :[branch_name]

# 配置分行符
例如，您可以使用它来控制文件中的结束行。在Windows和基于Unix的系统中，新行有不同的字符(相应的\r\n和\n)。
因此，使用gitattributes，我们可以为Windows和Unix使用* text=auto在.gitattributes中为任何使用git的人对齐。
这样，如果你在Windows中使用Git项目，你会得到\r\n如果你在使用Unix或Linux，你会得到\n。

# 如何列出给定存储库中的当前git引用?
find .git/refs/

# git 看日志的方法
git log --oneline

# git 查查看日志提交记录
git log -n 3 --patch

# 撤销add
git reset

# 查看日志的提交差异
git show [hash_id]

# 切换某个文件恢复到某个版本的具体操作
git checkout <commit-hash> -- <file-path>

# 只下载某个文件或者文件夹需要按照下面谷歌插件
gitzip for github
