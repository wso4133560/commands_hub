# 主要目的是做LLVM的速查手册

# llvm本地jit虚拟机 初始化函数
llvm::InitializeNativeTarget();
llvm::InitializeNativeTargetAsmPrinter();
llvm::InitializeNativeTargetAsmParser();

# llvm::Type
auto BitWidth = Src->getType()->getIntegerBitWidth(); # 通过变量获取类型的宽度

# llvm::Value
StringRef Value::getName() const      # 获取value的名称

# llvm创建block块和block里面的指令操作
llvm::BasicBlock::Create
llvm::IRBuilder<> builder(BB);
CreateGEP       # 获取结构体和数组的API
CreateIntToPtr  # int地址变成指针
llvm::Type::getInt8PtrTy # 获取int指针的类型
llvm::ConstantInt::get #将常数变成llvm::Value

# llvm创建jit虚拟机函数
llvm::TargetRegistry::lookupTarget
the_target->createTargetMachine

# llvm的jit函数创建function
llvm::FunctionType::get
llvm::Function::Create
llvm::arg_begin       # 函数内部参数开始寄存器
llvm::arg_end
callFunc->print(llvm::outs(), nullptr);  #打印函数IR

# 函数insert新block块的方法
llvm::BasicBlock::Create(s_mod->getContext(), "", llvmFunc, block);

# irbuilder的特殊用法
1.替换结束指令指令
llvm::IRBuilder<> irb(subIt);
llvm::Instruction* terminator = subIt->getTerminator();
irb.SetInsertPoint(terminator);
irb.CreateBr(block);
2.替换指令的函数
llvm::ReplaceInstWithInst(op,newInst);

CreateZExtOrTrunc #类型扩展时高位全部充1
CreateSExtOrTrunc #类型扩展时高位全部充0

# jit引擎
必须下面执行完了后才能跳转到jit出来的内存
ExecutionEngine->finalizeObject()

# jit主要参考下面的文件
HowToUseLLJIT.cpp
