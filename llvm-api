# 主要目的是做LLVM的速查手册

# llvm本地jit虚拟机 初始化函数
llvm::InitializeNativeTarget();
llvm::InitializeNativeTargetAsmPrinter();
llvm::InitializeNativeTargetAsmParser();

# llvm::Type
auto BitWidth = Src->getType()->getIntegerBitWidth(); # 通过变量获取类型的宽度
->getPointerTo      # type类型变成指针类型

# llvm::Value
StringRef Value::getName() const      # 获取value的名称
llvm::VectorType::get(llvm::Type::getInt32Ty(*Con), 2);   # 获取vector的类型
eraseFromParent 删除自己

# llvm创建block块和block里面的指令操作
llvm::BasicBlock::Create
llvm::IRBuilder<> builder(BB);
CreateGEP       # 获取结构体和数组的API
CreateIntToPtr  # int地址变成指针
llvm::Type::getInt8PtrTy # 获取int指针的类型
llvm::ConstantInt::get #将常数变成llvm::Value
llvm::ConstantFP::get  # 将常数变成llvm::Value
llvm::Constant::getNullValue(SrcType); # 根据类型获取零值

# llvm创建jit虚拟机函数
llvm::TargetRegistry::lookupTarget
the_target->createTargetMachine

# llvm的jit函数创建function
llvm::FunctionType::get
llvm::Function::Create
llvm::arg_begin       # 函数内部参数开始寄存器
llvm::arg_end
callFunc->print(llvm::outs(), nullptr);  #打印函数IR
bool flag = llvm::verifyFunction(*llvmFunc, &llvm::outs());  # 校验函数是否有问题。返回值为false 函数OK ，返回值为true 函数有问题

# 函数insert新block块的方法
llvm::BasicBlock::Create(s_mod->getContext(), "", llvmFunc, block);

# irbuilder的特殊用法
1.替换结束指令指令
llvm::IRBuilder<> irb(subIt);
llvm::Instruction* terminator = subIt->getTerminator();
irb.SetInsertPoint(terminator);
irb.CreateBr(block);
2.替换指令的函数
llvm::ReplaceInstWithInst(op,newInst);

CreateZExtOrTrunc #类型扩展时高位 如果为1 全部充0
CreateSExtOrTrunc #类型扩展时高位 如果为0 全部充1

curIRB->CreateVectorSplat   # 此函数创建数组

curIRB->CreateExtractElement(Src, C_UINT32(Op->Index)); # 此函数取数据
curIRB->CreateInsertElement(Src1, Source, curIRB->getInt32(Op->DestIdx)); #此函数是插入
# jit引擎
必须下面执行完了后才能跳转到jit出来的内存
ExecutionEngine->finalizeObject()

# jit主要参考下面的文件
HowToUseLLJIT.cpp

# 指定寄存器的API
auto IA = InlineAsm::get(FunctionType::get(Int8PtrTy, false), "", Constraint, true);
CPUReg.Base = CallInst::Create(IA, "cpu", LastInst);

llvm::FunctionType *AsmFTy = llvm::FunctionType::get(Type::getVoidTy(FStub->getContext()),AsmArgTypes, false);
llvm::InlineAsm *IA = llvm::InlineAsm::get(AsmFTy, "mfc1 $$4,$$f12", "", true, /* IsAlignStack */ false, llvm::InlineAsm::AD_Intel);
CallInst::Create(IA, BB);

llvm::FunctionType *AsmFTy = llvm::FunctionType::get(Type::getVoidTy(FStub->getContext()),AsmArgTypes, false);
llvm::InlineAsm *IA = llvm::InlineAsm::get(AsmFTy, "mfc1 $$4,$$f12", "", true, /* IsAlignStack */ false, llvm::InlineAsm::AD_ATT);
CallInst::Create(IA, BB);



# 偏移10个字节
// 定义一个 i8* 类型的指针
auto* ptr = builder.CreateAlloca(builder.getInt8Ty(), nullptr, "ptr");
// 偏移 10 个字节，即 10 个 i8 类型的元素
auto* offsetPtr = builder.CreateGEP(builder.getInt8Ty(), ptr, builder.getInt64(10));

# llvm调用外部函数
#include <llvm/IR/IRBuilder.h>
#include <llvm/IR/Module.h>
#include <llvm/IR/Type.h>

using namespace llvm;

// Declare the external function
extern "C" int foo(int, int);

int main() {
  LLVMContext Context;
  Module M("test", Context);
  IRBuilder<> Builder(Context);

  // Create a function type that describes the external function
  Type *ArgType1 = Type::getInt32Ty(Context);
  Type *ArgType2 = Type::getInt32Ty(Context);
  Type *ReturnType = Type::getInt32Ty(Context);
  FunctionType *FT = FunctionType::get(ReturnType, { ArgType1, ArgType2 }, false);

  // Get or insert the external function
  Function *F = M.getOrInsertFunction("foo", FT);

  // Create arguments
  Value *Arg1 = Builder.getInt32(1);
  Value *Arg2 = Builder.getInt32(2);
  std::vector<Value*> Args = { Arg1, Arg2 };

  // Call the external function
  Value *RetVal = Builder.CreateCall(F, Args);

  // Print the result
  Builder.CreateRet(RetVal);
  M.print(outs(), nullptr);

  return 0;
}

# 打印DAG流图的做法
MF.print(errs());

这些参数是用于描述SelectionDAG节点属性的枚举值。下面是每个参数的含义：

- SDNPCommutative：表示节点是可交换的，即操作数的顺序不影响结果。
- SDNPAssociative：表示节点是可结合的，即操作数的结合方式不影响结果。
- SDNPHasChain：表示节点具有链操作数，用于描述节点之间的依赖关系。
- SDNPOutGlue：表示节点具有输出粘合剂，用于描述节点的输出与其他节点的连接。
- SDNPInGlue：表示节点具有输入粘合剂，用于描述节点的输入与其他节点的连接。
- SDNPOptInGlue：表示节点具有可选输入粘合剂，用于描述节点的可选输入与其他节点的连接。
- SDNPMayLoad：表示节点可能会加载内存。
- SDNPMayStore：表示节点可能会存储到内存。
- SDNPSideEffect：表示节点具有副作用，即节点执行可能会影响程序状态。
- SDNPMemOperand：表示节点涉及内存操作，并且需要一个描述访存的内存操作数。
- SDNPVariadic：表示节点具有可变数量的操作数。
- SDNPWantRoot：表示节点希望成为根节点。
- SDNPWantParent：表示节点希望成为父节点。

这些属性用于描述SelectionDAG中的节点，以便在代码生成过程中进行优化和转换。
